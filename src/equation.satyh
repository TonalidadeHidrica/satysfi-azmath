% versatyle/math/equation.satyh
%
% align や gather に相当するコマンド群．

@require: list
@import: util
@import: common/matrix
@import: common/counter
@import: common/param
@import: parens
@import: matrices

type labelmeta = (|
  tag: string option;
  label: string option;
  no-label-flag: bool;
|)
type labelfmt = context -> labelmeta -> inline-boxes option

module AZMathEquation : sig

% パラメータ・カウンタ
  val allow-display-break: bool AZMathParam.t
  val ctr : Counter.t

% ラベル指定
  % 数式に付ける相互参照用のラベルを指定する。組版上の tag も変えられる。
  direct \label : [string?; string] math-cmd
  % このコマンドが付いた行だけ tag を強制的に付けない。
  direct \notag : [] math-cmd
  % \label コマンドがつかない限り、基本的にラベルを付けないフォーマット。
  val nolabel : labelfmt

  direct +eqn-gather : [math list;] block-cmd
  direct +eqn-gather-test : [labelfmt?;math list;] block-cmd
  direct +eqn-align : [math list;] block-cmd
  direct +eqn-alignat : [int; math list;] block-cmd
  direct \eqn-gather : [math list;] inline-cmd
  direct \eqn-align : [math list;] inline-cmd
  direct \eqn-alignat : [int; math list;] inline-cmd
  direct \eqn-aligned : [math list;] math-cmd
  direct \eqn-cases : [math list;] math-cmd
  % direct \alignedat : [int; math list;] math-cmd
  % direct \alignedat : [int; math list;] math-cmd

end = struct

% convenient functions

  let ib-annotation ?:ht key =
    let ht = ht |> Option.from 0pt in
    inline-graphics 0pt 0pt 0pt (fun (x, y) -> (
      let () = register-destination key (x, y +' ht) in []
    ))

  % param/counter {{{

  let allow-display-break = AZMathParam.make true

  let ctr = Counter.make 0 []

  let labelf =
    let value-to-label base idx =
      % base: 数式開始時点でのカウンタの値．
      % idx: 対象の数式の何番目にあるか（0 始まり）
      let _ = ctr |> Counter.inc in
      let it-value = embed-string (arabic (base + idx)) in
      {(#it-value;)}
    in
    Ref.make value-to-label

  let create-label-list n-eq =
    let int-to-ib = Ref.get labelf in
    % let _ = ctr |> Counter.inc in
    let ctr-value = Counter.get ctr in
    % let _ = ctr |> Counter.add (n-eq - 1) in
    let rangelst = range 1 n-eq in
    List.map (int-to-ib ctr-value) rangelst
  % }}}

  let-rec map-each f-lst lst =
    match f-lst with
    | [] -> []
    | f1::fs -> (match lst with
                 | [] -> []
                 | x1::xs ->  (f1 x1) :: (map-each fs xs))

  let math-to-aligned-ib ctx idx m mprevopt mnextopt =
    let lengap = get-font-size ctx *' 2. in

    let ibm = embed-math ctx m in
    let ib =
      match mnextopt with
      | None -> ibm
      | Some(mnext) ->
          let ibspaceopt = space-between-maths ctx m mnext in
          ( match ibspaceopt with
            | None          -> ibm
            | Some(ibspace) -> ibm ++ ibspace
          )
    in

    if idx mod 2 == 0 then
      inline-fil ++ ib
    else
      match mnextopt with
      | None    -> ib ++ inline-fil
      | Some(_) -> ib ++ inline-fil ++ inline-skip lengap


  let create-max-height-vphantom lst-ib inner =
    % inline-boxes のリストに対し，それらの最大の高さ/最大の深さを求め，
    % それらをそれぞれ高さ・深さにもつよう加工した inline-boxes を返す．
    % ただし， width は 0 とする．
    let maximum len1 len2 = if len1 >' len2 then len1 else len2 in
    let get-natural-height ib = let (_, h, _) = get-natural-metrics ib in h in
    let get-natural-depth  ib = let (_, _, d) = get-natural-metrics ib in d in
    let max-height = List.fold-right maximum 0pt (List.map get-natural-height lst-ib) in
    let max-depth = List.fold-right maximum 0pt (List.map get-natural-depth lst-ib) in

    let (w, _, _) = get-natural-metrics inner in
    inline-graphics 0pt max-height max-depth (fun (x, y) -> [
      draw-text (x -' w, y) inner
    ])

  % default value of labelmeta
  let param-label-meta = AZMathParam.make (|
    tag = None;
    label = None;
    no-label-flag = false;
  |)

  let-math \notag =
    let mathf ctx =
      let eqn-meta = param-label-meta |> AZMathParam.get in
      let () =
        param-label-meta |> AZMathParam.set (|
          eqn-meta with
            no-label-flag = true;
        |)
      in
      ${}
    in
    text-in-math MathOrd (fun ctx -> embed-math ctx (mathf ctx))

  let-math \label ?:tagstr label =
    let mathf ctx =
      let eqn-meta = param-label-meta |> AZMathParam.get in
      let () =
        param-label-meta |> AZMathParam.set (|
          eqn-meta with
            tag = tagstr;
            label = Some(label)
        |)
      in
      ${}
    in
    text-in-math MathOrd (fun ctx -> embed-math ctx (mathf ctx))

  % embed-math を行いつつ、内部で設定された meta 情報を返す。
  let embed-math-and-get-meta ctx m =
    let ib = embed-math ctx m in
    let eqn-meta = param-label-meta |> AZMathParam.get in
    let () = param-label-meta |> AZMathParam.discard in  % 初期値に戻す
    (ib, eqn-meta)

  % label-format のデフォルト値。
  let default-labelfmt ctx label-meta =
    let tagstr = match label-meta#tag with
      | Some(tag) -> tag  % tag が指定されていたらそれを使う
      | None -> (  % デフォルトでは連番の数字
          let v = ctr |> Counter.inc in
          arabic v
      )
    in
    let ib-tag =
      let it = embed-string tagstr in
      read-inline ctx {(#it;)}
    in
    % 相互参照への登録
    let ib-ref = match label-meta#label with
      | None -> inline-nil
      | Some(label) ->
          let (_, ht, _) = get-natural-metrics ib-tag in
          let () = register-cross-reference (`eq:` ^ label ^ `:num`) tagstr in
          (ib-annotation ?:ht (`eq:` ^ label))
            ++ hook-page-break ( fun pbinfo _ ->
              register-cross-reference (`eq:` ^ label ^ `:page`) (arabic pbinfo#page-number)
            )
    in
    Some(ib-ref ++ ib-tag)

  let nolabel ctx label-meta =
    match label-meta#label with
    | None -> None
    | Some(_) -> default-labelfmt ctx label-meta

  let align-math ctx ib-m =
    let (wid-ib, _, _) = get-natural-metrics ib-m in
    let wid-line = get-text-width ctx in
    let wid-before-eqn = (wid-line -' wid-ib) *' 0.5 in
      [
        line-break (AZMathParam.get allow-display-break) true ctx (
          (inline-skip wid-before-eqn) ++ ib-m ++ (inline-skip wid-before-eqn)
        )
      ]

  % 数式とタグの inline-boxes を受け取り、 block-boxes のリストを返す。
  let align-math-tag ctx ib-m ib-tag =
    let (wid-ib, _, _) = get-natural-metrics ib-m in
    let (wid-tag, _, _) = get-natural-metrics ib-tag in
    let wid-line = get-text-width ctx in

    let wid-before-eqn = (wid-line -' wid-ib) *' 0.5 in
    let wid-space-bwn-eqn-tag = wid-before-eqn -' wid-tag in

    if wid-space-bwn-eqn-tag >' 0pt then
      % 数式とタグがぶつからない場合
      [
        line-break (AZMathParam.get allow-display-break) true ctx (
          (inline-skip wid-before-eqn) ++ ib-m
            ++ (inline-skip wid-space-bwn-eqn-tag) ++ ib-tag
        )
      ]
    else
      % ぶつかる場合
      [
        line-break (AZMathParam.get allow-display-break) false ctx (
          (inline-skip wid-before-eqn) ++ ib-m ++ (inline-skip wid-before-eqn)
        );
        line-break false true ctx (
          (inline-skip (wid-line -' wid-tag)) ++ ib-tag
        );
      ]


  % gather 環境。
  let-block ctx +eqn-gather-test ?:labelfmt mlst =
    let labelfmt = labelfmt |> Option.from default-labelfmt in

    % (inline-boxes * labelmeta) list
    let ib-meta-lst = mlst |> List.map (embed-math-and-get-meta ctx) in

    % 数式間の縦の余白を規定する
    let ctx =
      let fsize = get-font-size ctx in
      ctx |> set-paragraph-margin (fsize *' 0.6) (fsize *' 0.6)
    in

    % 数式の inline-boxes とtag情報を受け取り、block-boxes を返す。
    let align-eqn-f ib-meta =
      let (ib-m, eqn-meta) = ib-meta in
      % タグの inline-boxes を取得
      if eqn-meta#no-label-flag then
        align-math ctx ib-m
      else
        match (labelfmt ctx eqn-meta) with
        | None -> align-math ctx ib-m
        | Some(ib-tag) -> align-math-tag ctx ib-m ib-tag
    in

    let bb-lst = ib-meta-lst |> List.map align-eqn-f |> List.concat in
    bb-lst |> List.fold-left (+++) block-nil


  let-block ctx +eqn-gather mlst =
    let vlen = 4pt in

    let math-matrix = AZTypeMatrix.from-list 1 ${} mlst in
    let ib-matrix =
      let math-to-centered-ib ctx m = inline-fil ++ (embed-math ctx m) ++ inline-fil in
      AZTypeMatrix.map (math-to-centered-ib ctx) math-matrix in

    let cell-matrix =
      AZTypeMatrix.map (fun ib -> NormalCell((0pt, 0pt, vlen, vlen), ib)) ib-matrix
    in

    % Label 表示用のテーブル（右端に置いて複数行に渡るラベルを実現する）
    let it-lst-label = create-label-list (List.length mlst) in
    let ib-lst-label = List.map (read-inline ctx) it-lst-label in
    let max-height-vphantom-f = List.map create-max-height-vphantom (AZTypeMatrix.to-llist ib-matrix) in
    let dummy-ib = read-inline ctx {} in
    let ib-phantom-label-matrix = AZTypeMatrix.from-list 1 dummy-ib (map-each max-height-vphantom-f ib-lst-label) in
    let cell-label-matrix =
      AZTypeMatrix.map (fun ib -> NormalCell((0pt, 0pt, vlen, vlen), ib)) ib-phantom-label-matrix
    in

    % let rulef = (labelf [read-inline ctx {hose}; read-inline ctx {fuga}] 300pt) in
    let rulef _ _ = [] in
    let ib-tabular = tabular (AZTypeMatrix.to-llist cell-matrix) rulef in
    let ib-label-tabular = tabular (AZTypeMatrix.to-llist cell-label-matrix) rulef in

    let margin = get-font-size ctx *' 1.0 in
    let ctx-eqn = ctx |> set-paragraph-margin margin margin in
    line-break true true ctx-eqn (inline-fil ++ ib-tabular ++ inline-fil ++ ib-label-tabular)

  let-inline ctx \eqn-gather mlst =
  inline-fil ++
    embed-block-breakable ctx (read-block ctx '<+eqn-gather(mlst);>)
      ++ omit-skip-after


  let-block ctx +eqn-align mlst =
    let vlen = 4pt in

    let math-matrix = AZTypeMatrix.from-list 2 ${} mlst in
    let ib-matrix = AZTypeMatrix.map-rowidx-adjacent (math-to-aligned-ib ctx) math-matrix in

    let cell-matrix =
      AZTypeMatrix.map (fun ib -> NormalCell((0pt, 0pt, vlen, vlen), ib)) ib-matrix
    in

    % Label 表示用のテーブル（右端に置いて複数行に渡るラベルを実現する）
    let (nrow, _) = AZTypeMatrix.shape cell-matrix in
    let it-lst-label = create-label-list nrow in
    let ib-lst-label = List.map (read-inline ctx) it-lst-label in
    let max-height-vphantom-f = List.map create-max-height-vphantom (AZTypeMatrix.to-llist ib-matrix) in
    let dummy-ib = read-inline ctx {} in
    let ib-phantom-label-matrix = AZTypeMatrix.from-list 1 dummy-ib (map-each max-height-vphantom-f ib-lst-label) in
    let cell-label-matrix =
      AZTypeMatrix.map (fun ib -> NormalCell((0pt, 0pt, vlen, vlen), ib)) ib-phantom-label-matrix
    in

    % let rulef = (labelf [read-inline ctx {hose}; read-inline ctx {fuga}] 300pt) in
    let rulef _ _ = [] in
    let ib-tabular = tabular (AZTypeMatrix.to-llist cell-matrix) rulef in
    let ib-label-tabular = tabular (AZTypeMatrix.to-llist cell-label-matrix) rulef in

    let margin = get-font-size ctx *' 1.0 in
    let ctx-eqn = ctx |> set-paragraph-margin margin margin in
    line-break true true ctx-eqn (inline-fil ++ ib-tabular ++ inline-fil ++ ib-label-tabular)

  let-inline ctx \eqn-align mlst =
    inline-fil ++
      embed-block-breakable ctx (read-block ctx '<+eqn-align(mlst);>)
        ++ omit-skip-after

  let-math \eqn-aligned mlst =
    let embedf ctx =
      let vlen = 4pt in

      let math-matrix = AZTypeMatrix.from-list 2 ${} mlst in
      let ib-matrix = AZTypeMatrix.map-rowidx-adjacent (math-to-aligned-ib ctx) math-matrix in

      let cell-matrix =
        AZTypeMatrix.map (fun ib -> NormalCell((0pt, 0pt, vlen, vlen), ib)) ib-matrix
      in

      let rulef _ _ = [] in
      let ib-tabular = tabular (AZTypeMatrix.to-llist cell-matrix) rulef in

      let margin = get-font-size ctx *' 1.0 in
      let ctx-eqn = ctx |> set-paragraph-margin margin margin in
      ib-tabular
    in
    text-in-math MathOrd embedf

  let-block ctx +eqn-alignat ncol mlst =

    let vlen = 4pt in

    let math-matrix = AZTypeMatrix.from-list (ncol * 2) ${} mlst in
    let ib-matrix = AZTypeMatrix.map-rowidx-adjacent (math-to-aligned-ib ctx) math-matrix in

    let cell-matrix =
      AZTypeMatrix.map (fun ib -> NormalCell((0pt, 0pt, vlen, vlen), ib)) ib-matrix
    in

    let rulef _ _ = [] in
    let ib-tabular = tabular (AZTypeMatrix.to-llist cell-matrix) rulef in

    let margin = get-font-size ctx *' 1.0 in
    let ctx-eqn = ctx |> set-paragraph-margin margin margin in
    line-break true true ctx-eqn (inline-fil ++ ib-tabular ++ inline-fil)

  let-inline ctx \eqn-alignat ncol mlst =
    inline-fil ++
      embed-block-breakable ctx (read-block ctx '<+eqn-alignat(ncol)(mlst);>)
        ++ omit-skip-after

  let-math \eqn-cases mlst =
    let aligner i j ib =
      if j mod 2 == 0 then ib ++ inline-fil
      else inline-fil ++ ib
    in
    let mtx = AZMathMatrices.matrix-body aligner 2 mlst in
    math-paren AZMathParens.curly-bracket-l AZMathParens.empty-bracket-r mtx

end
