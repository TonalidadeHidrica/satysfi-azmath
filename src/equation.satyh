% versatyle/math/equation.satyh
%
% align や gather に相当するコマンド群．

@require: base/list-ext
@require: base/tuple
@import: util
@import: common/matrix
@import: common/counter
@import: common/param
@import: parens
@import: matrices

% 別行立て数式につけるメタ情報。
type labelmeta = (|
  tag: string option;
  label: string option;
  no-label-flag: bool;
  keep-page-flag: bool;
|)

type labelfmt = context -> labelmeta -> inline-boxes option

module AZMathEquation : sig

  type labelmeta

% パラメータ・カウンタ
  % 別行立て数式環境の途中で改ページを許可するか。
  val allow-display-break: bool AZMathParam.t
  % 別行立て数式同士の縦の余白。
  val vmargin-between-eqn: (context -> length) AZMathParam.t
  % タグが数式の下に潜った時、その数式とタグの間に空ける縦方向の余白。
  val vmargin-between-eqn-and-tag: (context -> length) AZMathParam.t
  % 数式とタグの間に最低限なければならない余白の大きさ。
  % これを確保できそうにない場合はタグが数式の下に潜る。
  val min-gap-between-eqn-and-tag: (context -> length) AZMathParam.t

  % TODO: 数式環境前後の余白を指定可能にする
  % val min-gap-after-eqn: (context -> length) AZMathParam.t
  % val min-gap-before-eqn: (context -> length) AZMathParam.t

  % 数式番号のカウンタ。
  val ctr : Counter.t

% 数式環境
  % 複数の式を中央揃えにする。
  direct +eqn-gather : [labelfmt?;math list;] block-cmd
  direct \eqn-gather : [labelfmt?;math list;] inline-cmd
  % マーカーを付けた位置で複数の式を揃える。
  direct +eqn-align  : [labelfmt?; math list;] block-cmd
  direct \eqn-align  : [labelfmt?; math list;] inline-cmd
  % 横並びになった複数の式を揃える。
  direct +eqn-alignat : [int; math list;] block-cmd
  direct \eqn-alignat : [int; math list;] inline-cmd

% 数式の埋め込み
  % 数式内部で \eqn-align
  direct \eqn-aligned : [math list;] math-cmd
  % 場合わけ
  direct \eqn-cases : [math list;] math-cmd

% ラベル指定
  % 数式に付ける相互参照用のラベルを指定する。組版上の tag も変えられる。
  direct \label : [string?; string] math-cmd
  % このコマンドが付いた行だけ tag を強制的に付けない。
  direct \notag : [] math-cmd
  % このコマンドが付いた数式行の直後での改ページを抑制する。
  direct \keeppage : [] math-cmd
  % \notag\keeppage と同効果。 To Be Continued...
  direct \tbc : [] math-cmd

  % \label コマンドがつかない限り、基本的にラベルを付けないフォーマット。
  val notag : labelfmt

end = struct

% convenient functions

  let ib-annotation ?:ht key =
    let ht = ht |> Option.from 0pt in
    inline-graphics 0pt 0pt 0pt (fun (x, y) -> (
      let () = register-destination key (x, y +' ht) in []
    ))

  let create-max-height-vphantom lst-ib inner =
    % inline-boxes のリストに対し，それらの最大の高さ/最大の深さを求め，
    % それらをそれぞれ高さ・深さにもつよう加工した inline-boxes を返す．
    % ただし， width は 0 とする．
    let maximum len1 len2 = if len1 >' len2 then len1 else len2 in
    let get-natural-height ib = let (_, h, _) = get-natural-metrics ib in h in
    let get-natural-depth  ib = let (_, _, d) = get-natural-metrics ib in d in
    let max-height = List.fold-right maximum 0pt (List.map get-natural-height lst-ib) in
    let max-depth = List.fold-right maximum 0pt (List.map get-natural-depth lst-ib) in

    let (w, _, _) = get-natural-metrics inner in
    inline-graphics 0pt max-height max-depth (fun (x, y) -> [
      draw-text (x -' w, y) inner
    ])

% parameter

  let allow-display-break = AZMathParam.make true
  let vmargin-between-eqn = AZMathParam.make (fun ctx -> (get-font-size ctx) *' 0.6)
  let vmargin-between-eqn-and-tag = AZMathParam.make (fun ctx -> (get-font-size ctx) *' 0.3)
  let min-gap-between-eqn-and-tag = AZMathParam.make (fun ctx -> 2pt)

% counter

  let ctr = Counter.make 0 []

% parameter for extracting meta information from math text

  % metadata を表すパラメータ。
  let param-label-meta = AZMathParam.make (|
    tag = None;
    label = None;
    no-label-flag = false;
    keep-page-flag = false;
  |)

  % metadata を更新するコマンドたち。
  % text-in-math を使わないとうまくいかない。
  let-math \notag =
    let mathf ctx =
      let eqn-meta = param-label-meta |> AZMathParam.get in
      let () =
        param-label-meta |> AZMathParam.set (|
          eqn-meta with
            no-label-flag = true;
        |)
      in
      ${}
    in
    text-in-math MathOrd (fun ctx -> embed-math ctx (mathf ctx))

  let-math \label ?:tagstr label =
    let mathf ctx =
      let eqn-meta = param-label-meta |> AZMathParam.get in
      let () =
        param-label-meta |> AZMathParam.set (|
          eqn-meta with
            tag = tagstr;
            label = Some(label)
        |)
      in
      ${}
    in
    text-in-math MathOrd (fun ctx -> embed-math ctx (mathf ctx))

  let-math \keeppage =
    let mathf ctx =
      let eqn-meta = param-label-meta |> AZMathParam.get in
      let () =
        param-label-meta |> AZMathParam.set (|
          eqn-meta with
            keep-page-flag = true;
        |)
      in
      ${}
    in
    text-in-math MathOrd (fun ctx -> embed-math ctx (mathf ctx))

  let-math \tbc = ${\notag\keeppage}

% common functions for equation environment

  % 'a list を入力とし、 n 個ずつとってきて塊にする。余ったものは捨てる。
  % [1; 2; 3; 4; 5; 6] |> group-by- 2  =>  [[1; 2]; [3; 4]; [5; 6]] 的な。
  let group-by- n lst =
    let len = List.length lst in
    let n-row = len / n in
    let lst = lst |> List.take (n * n-row - 1) in
    let-rec aux lst =
      match lst with
      | [] -> []
      | lst ->
          let (lst-take, lst-rest) = lst |> List.split-at (n - 1) in
          lst-take :: (aux lst-rest)
    in
    aux lst

  % [[m11; m12]; [m21; m22]; ...] を
  % [([ib11; ib12], meta1); ([1b21; ib22], meta2); ...] にする
  let embed-math-and-get-meta ctx m-lst =
    let f m _ m-rightopt =
      % 右隣があるかどうか
      match m-rightopt with
        | None -> embed-math ctx m
        | Some(m-right) ->
            let ib-space = space-between-maths ctx m m-right in
            match ib-space with
              | None -> embed-math ctx m
              | Some(ib-space) -> (embed-math ctx m) ++ ib-space
    in
    let ib-lst = m-lst |> List.map-adjacent f in

    % meta 情報取得
    let eqn-meta = param-label-meta |> AZMathParam.get in
    let () = param-label-meta |> AZMathParam.discard in  % 初期値に戻す
    (ib-lst, eqn-meta)

  % 各列の幅の最大値を計算
  let calc-lst-max-wid ib-llst =
    % 2ベクトルを成分ごとに比較し、大きい方を成分とするベクトルを返す
    let-rec vec-max v1 v2 =
      match (v1, v2) with
      | (l1::rest1, l2::rest2) ->
          (length-max l1 l2) :: (vec-max rest1 rest2)
      | _ -> []
    in
    ib-llst |> List.map (fun ib-lst -> ib-lst |> List.map get-natural-width)  % length に変換
            |> List.fold-left vec-max [0pt; 0pt]  % align なので2つ

  % inline-boxes の前後に特定の比率で余白を付け加え、目標の幅にしてくれる。
  let add-spaces-with-ratio- ratio wid ib =
    let wid-ib = get-natural-width ib in
    let wid-space = wid -' wid-ib in
    let wid-left-space = wid-space *' ratio in
    let wid-right-space = wid-space *' (1.0 -. ratio) in
    (inline-skip wid-left-space) ++ ib ++ (inline-skip wid-right-space)

  % 与えられた情報を元に、N 個の inline-boxes を揃えつつ組む。
  % [Parameters]
  % ctx: context
  %   テキスト処理文脈
  % labelfmt: labelfmt
  %   ラベル・タグのフォーマット
  % align-coefs: float list s.t. length is N
  %   整列時の係数（0.0なら左揃え、1.0なら右揃え）
  % lst-max-wid: length list s.t. length is N
  %   整列するための基準幅。
  %   n番目の inline-boxes が lst-max-wid[n] の幅を持つよう補正する
  % ib-lst: inline-boxes list s.t. length is N
  %   対象となるインラインボックス列。
  % meta: meta info
  %   タグ情報。
  % [Returns] block-boxes list
  %   テキストが整列されたブロックボックス列
  let align-eqn ctx labelfmt align-coefs lst-max-wid (ib-lst, meta) =
    let ib-lst-with-space =
      List.zip (List.zip align-coefs lst-max-wid) ib-lst
        |> List.map (fun ((ratio, wid), ib) -> add-spaces-with-ratio- ratio wid ib)
    in
    let ib-concat = ib-lst-with-space |> List.fold-left (++) inline-nil in
    let wid-line = get-text-width ctx in
    let wid-space-lr-math = (wid-line -' (get-natural-width ib-concat)) *' 0.5 in

    % 数式間の縦の余白を規定する
    let mgn = (AZMathParam.get vmargin-between-eqn) ctx in
    let ctx = ctx |> set-paragraph-margin mgn mgn in

    match (labelfmt ctx meta) with
    | None ->
        [
          % 上側は allow-display-break パラメータで改行を許すか指定。
          % 下側は \keeppage が付いているかどうかで改行を許すか既定。
          line-break (AZMathParam.get allow-display-break) (not meta#keep-page-flag) ctx (
            (inline-skip wid-space-lr-math) ++ ib-concat ++ (inline-skip wid-space-lr-math)
          )
        ]
    | Some(ib-tag) ->
      let min-gap = (AZMathParam.get min-gap-between-eqn-and-tag) ctx in
      let wid-tag = get-natural-width ib-tag in
      let wid-space-bwn-eqn-tag = wid-space-lr-math -' wid-tag in
      if wid-space-bwn-eqn-tag >' min-gap then
        [
          % 上側は allow-display-break パラメータで改行を許すか指定。
          % 下側は \keeppage が付いているかどうかで改行を許すか既定。
          line-break (AZMathParam.get allow-display-break) (not meta#keep-page-flag) ctx (
            (inline-skip wid-space-lr-math) ++ ib-concat
              ++ (inline-skip wid-space-bwn-eqn-tag) ++ ib-tag
          )
        ]
      else
        % ぶつかる場合
        let mgn-mid = (AZMathParam.get vmargin-between-eqn-and-tag) ctx in
        [
          % 上側は allow-display-break パラメータで改行を許すか指定。
          % 下側はタグとの境目なので必ず false。
          line-break (AZMathParam.get allow-display-break) false
            (ctx |> set-paragraph-margin mgn mgn-mid) (
            (inline-skip wid-space-lr-math) ++ ib-concat ++ (inline-skip wid-space-lr-math)
          );
          % 上側は数式との境目なので必ず false。
          % 下側は \keeppage が付いているかどうかで改行を許すか既定。
          line-break false (not meta#keep-page-flag) (ctx |> set-paragraph-margin mgn-mid mgn) (
            (inline-skip (wid-line -' wid-tag)) ++ ib-tag
          );
        ]


% labelfmt

  % label-format のデフォルト値。
  let default-labelfmt ctx label-meta =
    % no-label-flag が立っていたら問答無用でラベルなし
    if label-meta#no-label-flag then None else
      let tagstr = match label-meta#tag with
        | Some(tag) -> tag  % tag が指定されていたらそれを使う
        | None -> (  % デフォルトでは連番の数字
            let v = ctr |> Counter.inc in
            arabic v
        )
      in
      let ib-tag =
        let it = embed-string tagstr in
        read-inline ctx {(#it;)}
      in
      % 相互参照への登録
      let ib-ref = match label-meta#label with
        | None -> inline-nil
        | Some(label) ->
            let (_, ht, _) = get-natural-metrics ib-tag in
            let () = register-cross-reference (`eq:` ^ label ^ `:num`) tagstr in
            (ib-annotation ?:ht (`eq:` ^ label))
              ++ hook-page-break ( fun pbinfo _ ->
                register-cross-reference (`eq:` ^ label ^ `:page`) (arabic pbinfo#page-number)
              )
      in
      Some(ib-ref ++ ib-tag)

  let notag ctx label-meta =
    % no-label-flag が立っていたら問答無用でラベルなし
    if label-meta#no-label-flag then None else
      match label-meta#label with
      | None -> None
      | Some(_) -> default-labelfmt ctx label-meta

% +eqn-gather

  let-block ctx +eqn-gather ?:labelfmt mlst =
    % labelfmt の unwrap
    let labelfmt = labelfmt |> Option.from default-labelfmt in

    % [m1; m2; m3; m4; ...] を [[m1]; [m2]; [m3]; [m4]; ...] にする
    let math-llst = mlst |> group-by- 1 in
    % (inline-boxes list * meta) list を得る
    let ib-meta-lst = math-llst |> List.map (embed-math-and-get-meta ctx) in
    % 各列の幅の最大値
    let lst-max-wid =
      ib-meta-lst |> List.map (Pair.fst) % (inline-boxes list) list を得る
                  |> calc-lst-max-wid
    in

    let bb-lst = ib-meta-lst
      |> List.map (align-eqn ctx labelfmt [0.5] lst-max-wid) |> List.concat in
    bb-lst |> List.fold-left (+++) block-nil

  let-inline ctx \eqn-gather ?:labelfmt mlst =
    let labelfmt = labelfmt |> Option.from default-labelfmt in
    inline-fil ++
      embed-block-breakable ctx (read-block ctx '<+eqn-gather?:(labelfmt)(mlst);>)
        ++ omit-skip-after

% +eqn-align

  let-block ctx +eqn-align ?:labelfmt mlst =
    % labelfmt の unwrap
    let labelfmt = labelfmt |> Option.from default-labelfmt in

    % [m1; m2; m3; m4; ...] を [[m1; m2]; [m3; m4]; ...] にする
    let math-llst = mlst |> group-by- 2 in
    % (inline-boxes list * meta) list を得る
    let ib-meta-lst = math-llst |> List.map (embed-math-and-get-meta ctx) in
    % 各列の幅の最大値
    let lst-max-wid =
      ib-meta-lst |> List.map (Pair.fst) % (inline-boxes list) list を得る
                  |> calc-lst-max-wid
    in

    let bb-lst = ib-meta-lst
      |> List.map (align-eqn ctx labelfmt [1.0; 0.0] lst-max-wid) |> List.concat in
    bb-lst |> List.fold-left (+++) block-nil

  let-inline ctx \eqn-align ?:labelfmt mlst =
    let labelfmt = labelfmt |> Option.from default-labelfmt in
    inline-fil ++
      embed-block-breakable ctx (read-block ctx '<+eqn-align?:(labelfmt)(mlst);>)
        ++ omit-skip-after

% +eqn-alignat

  let math-to-aligned-ib ctx idx m mprevopt mnextopt =
    let lengap = get-font-size ctx *' 2. in

    let ibm = embed-math ctx m in
    let ib =
      match mnextopt with
      | None -> ibm
      | Some(mnext) ->
          let ibspaceopt = space-between-maths ctx m mnext in
          ( match ibspaceopt with
            | None          -> ibm
            | Some(ibspace) -> ibm ++ ibspace
          )
    in

    if idx mod 2 == 0 then
      inline-fil ++ ib
    else
      match mnextopt with
      | None    -> ib ++ inline-fil
      | Some(_) -> ib ++ inline-fil ++ inline-skip lengap

  let-block ctx +eqn-alignat ncol mlst =

    let vlen = 4pt in

    let math-matrix = AZTypeMatrix.from-list (ncol * 2) ${} mlst in
    let ib-matrix = AZTypeMatrix.map-rowidx-adjacent (math-to-aligned-ib ctx) math-matrix in

    let cell-matrix =
      AZTypeMatrix.map (fun ib -> NormalCell((0pt, 0pt, vlen, vlen), ib)) ib-matrix
    in

    let rulef _ _ = [] in
    let ib-tabular = tabular (AZTypeMatrix.to-llist cell-matrix) rulef in

    let margin = get-font-size ctx *' 1.0 in
    let ctx-eqn = ctx |> set-paragraph-margin margin margin in
    line-break true true ctx-eqn (inline-fil ++ ib-tabular ++ inline-fil)

  let-inline ctx \eqn-alignat ncol mlst =
    inline-fil ++
      embed-block-breakable ctx (read-block ctx '<+eqn-alignat(ncol)(mlst);>)
        ++ omit-skip-after

% \eqn-aligned

  let-math \eqn-aligned mlst =
    let embedf ctx =
      let vlen = 4pt in

      let math-matrix = AZTypeMatrix.from-list 2 ${} mlst in
      let ib-matrix = AZTypeMatrix.map-rowidx-adjacent (math-to-aligned-ib ctx) math-matrix in

      let cell-matrix =
        AZTypeMatrix.map (fun ib -> NormalCell((0pt, 0pt, vlen, vlen), ib)) ib-matrix
      in

      let rulef _ _ = [] in
      let ib-tabular = tabular (AZTypeMatrix.to-llist cell-matrix) rulef in

      let margin = get-font-size ctx *' 1.0 in
      let ctx-eqn = ctx |> set-paragraph-margin margin margin in
      ib-tabular
    in
    text-in-math MathOrd embedf

% \eqn-cases

  let-math \eqn-cases mlst =
    let aligner i j ib =
      if j mod 2 == 0 then ib ++ inline-fil
      else inline-fil ++ ib
    in
    let mtx = AZMathMatrices.matrix-body aligner 2 mlst in
    math-paren AZMathParens.curly-bracket-l AZMathParens.empty-bracket-r mtx

end
